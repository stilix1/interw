Версия в формате функций(может пригодиться)

import argparse
import os
from typing import List, Dict


# Проверка существования файлов
def validate_files(files: List[str]) -> List[str]:
    invalid_files = [file for file in files if not os.path.exists(file)]
    if invalid_files:
        raise FileNotFoundError(f"Следующие файлы не найдены: {', '.join(invalid_files)}")
    return files


def standardize_headers(headers: List[str]) -> Dict[str, str]:
    # маппинг заголовков на стандартные названия
    field_mapping = {
        'id': ['id', 'identifier', 'emp_id', 'employee_id'],
        'email': ['email', 'e-mail', 'mail', 'contact'],
        'name': ['name', 'full_name', 'employee_name'],
        'department': ['department', 'dept', 'team'],
        'hours_worked': ['hours_worked', 'hours', 'work_hours', 'h_work'],
        'hourly_rate': ['hourly_rate', 'rate', 'salary', 'wage', 'hour_rate', 'h_rate']
    }

    standardized_headers = {}

    # для каждого заголовка находим его маппинг
    for header in headers:
        header = header.lower()
        for standard_field, keywords in field_mapping.items():
            if any(keyword in header for keyword in keywords):
                standardized_headers[standard_field] = header
                break

    return standardized_headers


def read_and_standardize_csv(file_path: str) -> List[Dict[str, str]]:
    with open(file_path, 'r') as file:
        lines = file.readlines()

    raw_headers = lines[0].strip().split(',')

    # стандартизируем заголовки
    headers_mapping = standardize_headers(raw_headers)

    data = []

    for line in lines[1:]:
        values = line.strip().split(',')
        row_dict = {}

        # словарь по стандартным значениям
        for i, value in enumerate(values):
            for standard_key, original_header in headers_mapping.items():
                if raw_headers[i].lower() == original_header.lower():
                    row_dict[standard_key] = value

        # заполняем пустыми значениями, если чего-то нет
        for key in ['id', 'email', 'name', 'department', 'hours_worked', 'hourly_rate']:
            if key not in row_dict:
                row_dict[key] = ''  # пустое значение

        data.append(row_dict)

    return data


def process_multiple_csv(files: List[str]) -> List[Dict[str, str]]:
    all_data = []

    for file in files:
        data = read_and_standardize_csv(file)
        all_data.extend(data)

    # сортировка. По умолчанию по id
    sorted_data = sorting_data(all_data, sort_by='id')
    return sorted_data


# сортировка по ID
def sorting_data(data: List[Dict[str, str]], sort_by='id') -> List[Dict[str, str]]:
    sorted_data = sorted(data, key=lambda x: int(x[sort_by]))
    ordered_data = []
    standard_field_order = ['id', 'email', 'name', 'department', 'hours_worked', 'hourly_rate']

    for row in sorted_data:
        ordered_row = {key: row.get(key, '') for key in standard_field_order}
        ordered_data.append(ordered_row)
    return ordered_data


# расчет зп.
def calculate_salary(row: Dict[str, str]) -> float:
    return int(row['hours_worked']) * int(row['hourly_rate'])


# группировка данных
def group_by(data, field):
    grouped_data = {}
    for row in data:
        key = row.get(field, 'Unknown')
        if key not in grouped_data:
            grouped_data[key] = []
        grouped_data[key].append(row)
    return grouped_data


# функция для формирования отчетов
def generate_report(data: List[Dict[str, str]], report_type: str = 'payout') -> None:
    if report_type == 'payout':
        # Сортировка по зарплате и разделение по отделам
        grouped_data = group_by(data, 'department')
        for department, rows in grouped_data.items():
            print(f"Department: {department}")
            print('-' * 150)
            print(f"{'ID':<5} {'Name':<25} {'Email':<25} {'Hours Worked':<15} {'Hourly Rate':<15} {'Salary':<10}")
            print('-' * 105)

            # сортируем сотрудников по id внутри каждого отдела
            sorted_rows = sorted(rows, key=lambda x: int(x['id']), reverse=False)
            for row in sorted_rows:
                salary = calculate_salary(row)
                print(f"{row['id']:<5} {row['name']:<25} {row['email']:<25} "
                      f"{row['hours_worked']:<15} {row['hourly_rate']:<15} {salary:<10.2f}")
            print('\n' + '-' * 150 + '\n')

    elif report_type == 'average_hourly_rate':
        # вычисление средней почасовой ставки по отделам
        grouped_data = group_by(data, 'department')
        for department, rows in grouped_data.items():
            print(f"Department: {department}")
            print('-' * 150)
            hourly_rates = [int(row['hourly_rate']) for row in rows if row['hourly_rate'].isdigit()]
            if hourly_rates:
                average_rate = sum(hourly_rates) / len(hourly_rates)
                print(f"Average Hourly Rate: {average_rate:.2f}")
            else:
                print("No data available for average hourly rate.")
            print('-' * 150 + '\n')

    else:
        print("Report type not implemented.")


# маппинг типов отчетов на функции
REPORTS = {
    'payout': generate_report,
    'average_hourly_rate': generate_report
}


# основная логика
def main(files: List[str], report_type: str) -> None:
    try:
        validate_files(files)  # проверка файлов
        all_data = process_multiple_csv(files)  # чтение и стандартизация данных
        sorted_data = sorting_data(all_data)  # сортировка данных

        if report_type in REPORTS:
            REPORTS[report_type](sorted_data, report_type)  # генерация нужного отчета
        else:
            print(f"Ошибка: отчет '{report_type}' не поддерживается.")
    except Exception as e:
        print(f"Произошла ошибка: {str(e)}")


# добавление аргументов
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Скрипт для генерации отчетов по данным из CSV")
    parser.add_argument('files', metavar='F', type=str, nargs='+', help="Список файлов CSV")
    parser.add_argument('--report', type=str, required=True,
                        help="Тип отчета для генерации (например, 'salary', 'average_hourly_rate')")

    args = parser.parse_args()


    main(args.files, args.report)

